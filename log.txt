Delay universal:

Hw delay:-

#include <reg51.h>

void hw_delay(unsigned int ms) {
    unsigned int i;
    for(i = 0; i < ms; i++) {
        TMOD |= 0x01;       // Set Timer0 in Mode1 (16-bit)
        TH0 = 0xFC;         // Load high byte for 1ms delay (65536 - 1000 = 64536 => 0xFC18)
        TL0 = 0x18;         // Load low byte
        TR0 = 1;            // Start Timer0
        while(TF0 == 0);    // Wait for overflow
        TR0 = 0;            // Stop Timer0
        TF0 = 0;            // Clear overflow flag
    }
}


Sw_delay:-

void sw_delay(unsigned int ms) {
    unsigned int i, j;
    for(i = 0; i < ms; i++) {
        for(j = 0; j < 1275; j++);  // Calibrated for 1ms delay at 11.0592 MHz
    }
}



Hw delay lpc:-

#include <LPC214x.h>

void hw_delay(unsigned int ms) {
    unsigned int i;
    
    // Power on Timer0 (usually already on, but good practice)
    PCONP |= (1 << 1);  // Power Control for Timer0

    for(i = 0; i < ms; i++) {
        T0TCR = 0x02;       // Reset Timer
        T0PR = 11999;       // Prescaler: (12MHz / (11999 + 1)) = 1kHz => 1 tick = 1 ms
        T0TCR = 0x01;       // Enable Timer

        while (T0TC < 1);   // Wait until TC reaches 1 ms

        T0TCR = 0x00;       // Disable Timer
    }
}


Software delay:-

void sw_delay(unsigned int ms) {
    unsigned int i, j;
    for(i = 0; i < ms; i++) {
        for(j = 0; j < 1000; j++);  // ~1 ms delay
    }
}









LCD Interfacing LPC 214X


#include <LPC214x.h>

#define RS  (1 << 8)
#define EN  (1 << 9)
#define D4  (1 << 10)
#define D5  (1 << 11)
#define D6  (1 << 12)
#define D7  (1 << 13)

void hw_delay(unsigned int ms);  // You already defined
void sw_delay(unsigned int ms);  // You already defined

void lcd_enable() {
    IO0SET = EN;
    hw_delay(1);
    IO0CLR = EN;
}

void lcd_send4(unsigned char nibble) {
    IO0CLR = D4 | D5 | D6 | D7;
    if(nibble & 0x01) IO0SET |= D4;
    if(nibble & 0x02) IO0SET |= D5;
    if(nibble & 0x04) IO0SET |= D6;
    if(nibble & 0x08) IO0SET |= D7;
    lcd_enable();
}

void lcd_cmd(unsigned char cmd) {
    IO0CLR = RS;
    lcd_send4(cmd >> 4);
    lcd_send4(cmd & 0x0F);
    hw_delay(2);
}

void lcd_data(unsigned char data) {
    IO0SET = RS;
    lcd_send4(data >> 4);
    lcd_send4(data & 0x0F);
    hw_delay(2);
}

void lcd_init() {
    IO0DIR |= RS | EN | D4 | D5 | D6 | D7;
    hw_delay(20);
    lcd_cmd(0x02);  // 4-bit mode
    lcd_cmd(0x28);  // 2 line, 5x7
    lcd_cmd(0x0C);  // Display ON, cursor OFF
    lcd_cmd(0x06);  // Auto increment
    lcd_cmd(0x01);  // Clear display
}

void lcd_clear() {
    lcd_cmd(0x01);
    hw_delay(2);
}

void lcd_print(char *text) {
    while(*text) {
        lcd_data(*text++);
    }
}

void show_scroll_left(char *text) {
    lcd_clear();
    lcd_print(text);
    for(int i = 0; i < 16; i++) {
        hw_delay(300);
        lcd_cmd(0x18);  // Shift left
    }
}

void show_scroll_right(char *text) {
    lcd_clear();
    lcd_print(text);
    for(int i = 0; i < 16; i++) {
        hw_delay(300);
        lcd_cmd(0x1C);  // Shift right
    }
}

void show_blink(char *text, unsigned int delay_ms) {
    for(int i = 0; i < 5; i++) {
        lcd_clear();
        hw_delay(delay_ms);
        lcd_cmd(0x80);      // Go to first line
        lcd_print(text);
        hw_delay(delay_ms);
    }
}








UART LPC 214X

#include <LPC214x.h>

void uart_init() {
    // Set P0.0 (TXD0) and P0.1 (RXD0) to UART0 function
    PINSEL0 |= 0x00000005;

    U0LCR = 0x83;           // 8-bit, 1 stop bit, enable DLAB
    U0DLL = 97;             // For 9600 baud at 15MHz PCLK (U0DLL = PCLK / (16 * Baud))
    U0DLM = 0;
    U0LCR = 0x03;           // Disable DLAB
}

void uart_tx_char(char ch) {
    while (!(U0LSR & 0x20));  // Wait for THR empty
    U0THR = ch;
}

void uart_tx_string(char *str) {
    while (*str) {
        uart_tx_char(*str++);
    }
}

char uart_rx_char() {
    while (!(U0LSR & 0x01));  // Wait for data ready
    return U0RBR;
}





LPC214X GPIO:-

#include <LPC214x.h>

void hw_delay(unsigned int ms);  // Assume you have this from earlier

void all_on_off() {
    IO0SET = 0xFF;   // Turn ON all LEDs
    hw_delay(500);
    IO0CLR = 0xFF;   // Turn OFF all LEDs
    hw_delay(500);
}

void left_to_right() {
    for (int i = 0; i < 8; i++) {
        IO0CLR = 0xFF;              // Clear all LEDs
        IO0SET = (1 << i);          // Turn on current LED
        hw_delay(300);
    }
}

void right_to_left() {
    for (int i = 7; i >= 0; i--) {
        IO0CLR = 0xFF;
        IO0SET = (1 << i);
        hw_delay(300);
    }
}

int main() {
    IO0DIR |= 0xFF;   // Set P0.0 - P0.7 as output

    while (1) {
        all_on_off();
        left_to_right();
        right_to_left();
    }
}






8051 interrupt programing:-

#include <reg51.h>

void uart_init() {
    TMOD |= 0x20;   // Timer1 in Mode2 (auto-reload mode)
    TH1 = 0xFD;     // Load for 9600 baud at 11.0592 MHz crystal
    SCON = 0x50;    // 8-bit data, REN enabled (receive enable)
    TR1 = 1;        // Start Timer1
    ES = 1;         // Enable UART interrupt
    EA = 1;         // Global interrupt enable
}

void uart_isr(void) interrupt 4 {
    if (RI) {
        RI = 0;        // Clear the receive interrupt flag
        char received_char = SBUF;  // Read the received character
        SBUF = received_char;      // Echo the received character back
    }
}

void main() {
    uart_init();     // Initialize UART
    while (1);       // Wait forever, all work is done in interrupt
}



8051 UART INTRUPT

#include <reg51.h>

void uart_init() {
    TMOD |= 0x20;   // Timer1 in Mode2 (auto-reload mode)
    TH1 = 0xFD;     // Load for 9600 baud at 11.0592 MHz crystal
    SCON = 0x50;    // 8-bit data, REN enabled (receive enable)
    TR1 = 1;        // Start Timer1
    ES = 1;         // Enable UART interrupt
    EA = 1;         // Global interrupt enable
}

void uart_isr(void) interrupt 4 {
    if (RI) {
        RI = 0;        // Clear the receive interrupt flag
        char received_char = SBUF;  // Read the received character
        SBUF = received_char;      // Echo the received character back
    }
}

void main() {
    uart_init();     // Initialize UART
    while (1);       // Wait forever, all work is done in interrupt
}




8051 INTRUPT toggle led

#include <reg51.h>

sbit LED = P1^1;

void timer0_init() {
    TMOD |= 0x01;   // Timer0 Mode 1
    TH0 = 0x3C;     // 50 ms delay
    TL0 = 0xB0;
    ET0 = 1;        // Enable Timer0 interrupt
    EA = 1;         // Global interrupt enable
    TR0 = 1;        // Start Timer0
}

void timer0_isr(void) interrupt 1 {
    LED = ~LED;     // Toggle LED
    TH0 = 0x3C;
    TL0 = 0xB0;     // Reload for next 50 ms
}

void main() {
    LED = 0;
    timer0_init();
    while(1);  // All work is interrupt-based
}



External INTRUPT 8051 
#include <reg51.h>

sbit LED = P1^0;

void ext_int0_init() {
    IT0 = 1;    // INT0 edge-triggered
    EX0 = 1;    // Enable INT0
    EA = 1;     // Enable global interrupt
}

void ext_int0_isr(void) interrupt 0 {
    LED = ~LED;  // Toggle LED
}

void main() {
    LED = 0;
    ext_int0_init();
    while(1);   // Wait forever, interrupt will handle the LED
}
close
